import ccxt
import requests
import time
import threading
from flask import Flask, request

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ====
telegram_token = '8054728348:AAHM1awWcJluyjkLPmxSSCVoP_KzsiqjwP8'
chat_id = '399812452'  # –ú–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –∏ chat_id –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ –∏ –º–æ–Ω–µ—Ç ====
exchange = ccxt.mexc({'enableRateLimit': True})

symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'NEAR/USDT']

# ==== –ü–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ($) ====
price_threshold = 50.0

# ==== –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω ====
last_prices = {}

# ==== Flask –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ====
app = Flask(__name__)

def send_telegram_message(message, chat_id_to_send=None):
    if chat_id_to_send is None:
        chat_id_to_send = chat_id
    url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'
    payload = {
        'chat_id': chat_id_to_send,
        'text': message
    }
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_prices():
    global last_prices
    for symbol in symbols:
        try:
            ticker = exchange.fetch_ticker(symbol)
            price = ticker['last']
            if symbol not in last_prices:
                last_prices[symbol] = price
                send_telegram_message(f"üì° –ü–µ—Ä–≤–∞—è —Ü–µ–Ω–∞ {symbol}: {price}")
            else:
                diff = abs(price - last_prices[symbol])
                if diff >= price_threshold:
                    message = f"üìà –¶–µ–Ω–∞ {symbol} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {price_threshold}$: {last_prices[symbol]} ‚Üí {price}"
                    send_telegram_message(message)
                    last_prices[symbol] = price
                else:
                    print(f"‚úîÔ∏è –¶–µ–Ω–∞ {symbol} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ: {last_prices[symbol]} ‚Üí {price}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")

def price_check_loop():
    while True:
        fetch_prices()
        time.sleep(10)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Telegram webhook ====

@app.route(f'/{telegram_token}', methods=['POST'])
def telegram_webhook():
    global price_threshold

    data = request.json
    message = data.get('message', {})
    chat_id_received = message.get('chat', {}).get('id')
    text = message.get('text', '')

    if text.startswith('/status'):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ –ø–æ—Ä–æ–≥
        status_lines = [f"–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {price_threshold}$"]
        for sym in symbols:
            price = last_prices.get(sym, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status_lines.append(f"{sym}: {price}")
        send_telegram_message('\n'.join(status_lines), chat_id_received)
        pass

    elif text.startswith('/set'):
        
            parts = text.split()
            if len(parts) == 2:
                new_threshold = float(parts[1])
                
                price_threshold = new_threshold
                send_telegram_message(f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {price_threshold}$", chat_id_received)
                pass 

    elif text.startswith('/price'):
        parts = text.split()
        if len(parts) == 2:
            symbol = parts[1].upper()
            # –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è MEXC (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT)
            symbol_full = f"{symbol}/USDT"
            try:
                ticker = exchange.fetch_ticker(symbol_full)
                price = ticker['last']
                send_telegram_message(f"üí∞ –¶–µ–Ω–∞ {symbol_full}: {price}$", chat_id_received)
            except Exception as e:
                send_telegram_message(f"–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol_full}", chat_id_received)
        else:
            send_telegram_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /price BTC)", chat_id_received)

    else:
        send_telegram_message("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status\n/set <—á–∏—Å–ª–æ>\n/price SYMBOL", chat_id_received)

    return {"ok": True}
        
 
def run_flask():
    app.run(host="0.0.0.0", port=8443)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–∞–º–∏...")

    price_check_loop()