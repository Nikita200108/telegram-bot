
import ccxt
import requests
import time
import threading
import os
from flask import Flask, request

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ====
telegram_token = '8054728348:AAHM1awWcJluyjkLPmxSSCVoP_KzsiqjwP8'
chat_id = '399812452'

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ –∏ –º–æ–Ω–µ—Ç ====
exchange = ccxt.mexc({'enableRateLimit': True})
symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'NEAR/USDT']

# ==== –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50$ –¥–ª—è –≤—Å–µ—Ö) ====
default_threshold = 50.0
price_thresholds = {symbol: default_threshold for symbol in symbols}

last_prices = {}

app = Flask(__name__)

def send_telegram_message(message, chat_id_to_send=None):
    if chat_id_to_send is None:
        chat_id_to_send = chat_id
    url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'
    payload = {'chat_id': chat_id_to_send, 'text': message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_prices():
    global last_prices
    for symbol in symbols:
        try:
            ticker = exchange.fetch_ticker(symbol)
            price = ticker['last']
            threshold = price_thresholds.get(symbol, default_threshold)
            if symbol not in last_prices:
                last_prices[symbol] = price
                send_telegram_message(f"üì° –ü–µ—Ä–≤–∞—è —Ü–µ–Ω–∞ {symbol}: {price} (–ü–æ—Ä–æ–≥: {threshold}$)")
            else:
                diff = abs(price - last_prices[symbol])
                if diff >= threshold:
                    message = f"üìà –¶–µ–Ω–∞ {symbol} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {threshold}$: {last_prices[symbol]} ‚Üí {price}"
                    send_telegram_message(message)
                    last_prices[symbol] = price
                else:
                    print(f"‚úîÔ∏è –¶–µ–Ω–∞ {symbol} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ: {last_prices[symbol]} ‚Üí {price} (–ü–æ—Ä–æ–≥ {threshold}$)")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")

price_check_loop_running = True

def price_check_loop():
    while price_check_loop_running:
        fetch_prices()
        time.sleep(10)

@app.route(f'/{telegram_token}', methods=['POST'])
def telegram_webhook():
    global price_thresholds, default_threshold
    data = request.json
    message = data.get('message', {})
    chat_id_received = message.get('chat', {}).get('id')
    text = message.get('text', '')

    if text.startswith('/status'):
        status_lines = [f"–ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ $):"]
        for sym in symbols:
            threshold = price_thresholds.get(sym, default_threshold)
            price = last_prices.get(sym, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status_lines.append(f"{sym}: —Ü–µ–Ω–∞ {price}, –ø–æ—Ä–æ–≥ {threshold}$")
        send_telegram_message('\n'.join(status_lines), chat_id_received)

    elif text.startswith('/set'):
        # –§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã:
        # /set BTC 30  ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Ä–æ–≥ 30$ –¥–ª—è BTC
        # /set default 40 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ
        parts = text.split()
        if len(parts) == 3:
            symbol_input = parts[1].upper()
            try:
                new_threshold = float(parts[2])
                if symbol_input == 'DEFAULT':
                    default_threshold = new_threshold
                    send_telegram_message(f"–ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {default_threshold}$", chat_id_received)
                else:
                    symbol_full = f"{symbol_input}/USDT"
                    if symbol_full in symbols:
                        price_thresholds[symbol_full] = new_threshold
                        send_telegram_message(f"–ü–æ—Ä–æ–≥ –¥–ª—è {symbol_full} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_threshold}$", chat_id_received)
                    else:
                        send_telegram_message(f"–í–∞–ª—é—Ç–∞ {symbol_full} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", chat_id_received)
            except ValueError:
                send_telegram_message("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.", chat_id_received)
        else:
            send_telegram_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/set SYMBOL NUMBER\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set BTC 30\n–ò–ª–∏ /set default 40", chat_id_received)

    elif text.startswith('/price'):
        parts = text.split()
        if len(parts) == 2:
            symbol_input = parts[1].upper()
            symbol_full = f"{symbol_input}/USDT"
            try:
                ticker = exchange.fetch_ticker(symbol_full)
                price = ticker['last']
                send_telegram_message(f"üí∞ –¶–µ–Ω–∞ {symbol_full}: {price}$", chat_id_received)
            except Exception as e:
                send_telegram_message(f"–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol_full}", chat_id_received)
        else:
            send_telegram_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /price BTC)", chat_id_received)

    else:
        send_telegram_message("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status\n/set SYMBOL NUMBER\n/price SYMBOL", chat_id_received)

    return {"ok": True}

def run_flask():
    port = int(os.environ.get("PORT", 8443))
    app.run(host="0.0.0.0", port=port)

if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–∞–º–∏...")
    price_check_loop()